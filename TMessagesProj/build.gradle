import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    google()
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

dependencies {
    implementation 'androidx.core:core:1.9.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.2.0"

    compileOnly 'org.checkerframework:checker-qual:3.12.0'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.5'
    implementation 'com.google.firebase:firebase-messaging:23.0.6'
    implementation 'com.google.firebase:firebase-config:21.1.1'
    implementation 'com.google.firebase:firebase-datatransport:18.1.5'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.4.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:18.0.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'
    implementation 'com.google.android.gms:play-services-safetynet:18.0.1'
    implementation 'com.googlecode.mp4parser:isoparser:1.1.22'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'com.google.mlkit:language-id:17.0.4'
    implementation 'com.android.billingclient:billing:5.1.0'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'com.google.guava:guava:31.1-android'
    implementation files('libs/libgsaverification-client.aar')
    
//    implementation "com.microsoft.appcenter:appcenter-distribute:3.3.1"
//    implementation "com.microsoft.appcenter:appcenter-crashes:3.3.1"

    //noinspection GradleDependency
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.6'
}


def proj_application_id = APP_PACKAGE
def proj_telegram_version = OFFICIAL_VERSION
def proj_telegram_build = Integer.parseInt(OFFICIAL_BUILD)
def proj_beta_enabled = Boolean.parseBoolean(NUKO_BETA)
def proj_beta_stamp = NUKO_BETA_STAMP
def proj_application_version = "${NUKO_VERSION}${proj_beta_enabled?"-Î²"+proj_beta_stamp:""}+tg${proj_telegram_version}"
def proj_application_build = Integer.parseInt(NUKO_BUILD)*100000 + proj_telegram_build

def proj_tg_app_id = Integer.parseInt(TELEGRAM_APP_ID)
def proj_tg_app_hash = TELEGRAM_APP_HASH

def proj_target_sdk = Integer.parseInt(ANDROID_TARGET_SDK_VERSION)
def proj_compile_sdk = Integer.parseInt(ANDROID_COMPILE_SDK_VERSION)
def proj_min_sdk = Integer.parseInt(ANDROID_MIN_SDK_VERSION)
def proj_build_tool_version = ANDROID_BUILD_TOOL_VERSION
def proj_ndk_version = "21.4.7075529"
def proj_native_sdk = 16
def proj_java = JavaVersion.VERSION_1_8

def signing_keystore_pwd = null
def signing_key_alias = null
def signing_key_pwd = null
//Properties properties
//def base64 = System.getenv("LOCAL_PROPERTIES")
//if (base64 != null && !base64.isBlank()) {
//    properties = new Properties()
//    properties.load(new ByteArrayInputStream(Base64.decoder.decode(base64)))
//} else if (project.rootProject.file("local.properties").exists()) {
//    properties = new Properties()
//    properties.load(project.rootProject.file("local.properties").newDataInputStream())
//}
//if (properties != null) {
    signing_keystore_pwd = getProps("SIGNING_KEYSTORE_PWD")
    signing_key_alias = getProps("SIGNING_KEY_ALIAS")
    signing_key_pwd = getProps("SIGNING_KEY_PWD")
//}
signing_keystore_pwd = signing_keystore_pwd ?: System.getenv("SIGNING_KEYSTORE_PWD")
signing_key_alias = signing_key_alias ?: System.getenv("SIGNING_KEY_ALIAS")
signing_key_pwd = signing_key_pwd ?: System.getenv("SIGNING_KEY_PWD")


if (signing_keystore_pwd == null) print "[BUILD_CONFIG]Release signing config not set, debugging will user debug default signing."

def isWindows = String.valueOf(DefaultNativePlatform.currentOperatingSystem.toFamilyName() == OperatingSystemFamily.WINDOWS)

android {
    compileSdkVersion proj_compile_sdk
    buildToolsVersion proj_build_tool_version
    ndkVersion proj_ndk_version
    
    defaultConfig.applicationId = proj_application_id

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    // unused at AndroidGradle 8.0
//    dexOptions {
//        jumboMode = true
//    }

    compileOptions {
        sourceCompatibility proj_java
        targetCompatibility proj_java

        coreLibraryDesugaringEnabled true
    }
    
    signingConfigs {
        release {
            storeFile file("config/release.keystore")
            storePassword signing_keystore_pwd
            keyAlias signing_key_alias
            keyPassword signing_key_pwd
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signing_keystore_pwd == null ? signingConfigs.debug : signingConfigs.release
            applicationIdSuffix ".beta"
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "true"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }

//        HA_private {
//            debuggable false
//            jniDebuggable false
//            signingConfig signingConfigs.debug
//            applicationIdSuffix ".beta"
//            minifyEnabled true
//            multiDexEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
//            ndk.debugSymbolLevel = 'FULL'
//            buildConfigField "String", "APP_CENTER_HASH", "\"" + getProps("APP_CENTER_HASH_PRIVATE") + "\""
//            buildConfigField "boolean", "DEBUG_VERSION", "true"
//            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "true"
//            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
//        }
//
//        HA_public {
//            debuggable false
//            jniDebuggable false
//            signingConfig signingConfigs.debug
//            applicationIdSuffix ".beta"
//            minifyEnabled true
//            multiDexEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            ndk.debugSymbolLevel = 'FULL'
//            buildConfigField "String", "APP_CENTER_HASH", "\"" + getProps("APP_CENTER_HASH_PUBLIC") + "\""
//            buildConfigField "boolean", "DEBUG_VERSION", "true"
//            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
//            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
//        }

//        standalone {
//            debuggable false
//            jniDebuggable false
//            minifyEnabled true
//            multiDexEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            ndk.debugSymbolLevel = 'FULL'
//            buildConfigField "String", "APP_CENTER_HASH", "\"\""
//            buildConfigField "boolean", "DEBUG_VERSION", "false"
//            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
//            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
//        }

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
            buildConfigField "String", "APP_CENTER_HASH", "\"\""
            buildConfigField "boolean", "DEBUG_VERSION", "false"
            buildConfigField "boolean", "DEBUG_PRIVATE_VERSION", "false"
            buildConfigField "boolean", "BUILD_HOST_IS_WINDOWS", isWindows
        }
    }
    
    sourceSets.debug {
        manifest.srcFile 'config/debug/AndroidManifest.xml'
    }
    
//    sourceSets.HA_private {
//        manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest.xml'
//    }
//    sourceSets.HA_public {
//        manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest.xml'
//    }

//    sourceSets.standalone {
//        manifest.srcFile 'config/release/AndroidManifest.xml'
//    }
    
    sourceSets.release {
        manifest.srcFile 'config/release/AndroidManifest.xml'
    }
    
    flavorDimensions "minApi"
    
    productFlavors {
        bundleAfat {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
            ext {
                abiVersionCode = 1
            }
        }
        bundleAfat_SDK23 {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
            sourceSets.debug {
                manifest.srcFile 'config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile 'config/release/AndroidManifest_SDK23.xml'
            }
//            sourceSets.standalone {
//                manifest.srcFile 'config/release/AndroidManifest_standalone.xml'
//            }
            minSdkVersion 23
            ext {
                abiVersionCode = 2
            }
        }
        afat {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
            sourceSets.debug {
                manifest.srcFile 'config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile 'config/release/AndroidManifest_SDK23.xml'
            }
//            sourceSets.standalone {
//                manifest.srcFile 'config/release/AndroidManifest_standalone.xml'
//            }
            ext {
                abiVersionCode = 9
            }
        }
    }
    
    defaultConfig.versionCode = proj_application_build
    
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "app.apk"
            output.versionCodeOverride = defaultConfig.versionCode * 10 + variant.productFlavors.get(0).abiVersionCode
        }
    }
    
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name != "release" && !names.contains("afat")) {
            setIgnore(true)
        }
    }
    
    defaultConfig {
        minSdkVersion proj_min_sdk
        targetSdkVersion proj_target_sdk
        versionName proj_application_version
        ndkVersion proj_ndk_version
        
        buildConfigField 'String', 'PACKAGE_ID', "\"$proj_application_id\""
        buildConfigField 'int', 'TELEGRAM_APP_ID', "$proj_tg_app_id"
        buildConfigField 'String', 'TELEGRAM_APP_HASH', "\"$proj_tg_app_hash\""
// will generated by default
//        buildConfigField 'String', 'NUKO_VERSION', "$proj_application_version"
//        buildConfigField 'int', 'NUKO_BUILD', "$proj_application_build"
        
        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']
        
        multiDexEnabled true
        
        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', "-DANDROID_PLATFORM=android-${proj_native_sdk}", "-j=${proj_native_sdk}"
            }
        }
    }
    
    buildFeatures {
        buildConfig = true
    }
    
    lintOptions {
        checkReleaseBuilds false
    }
    
}


def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return null
    }
}
apply plugin: 'com.google.gms.google-services'
