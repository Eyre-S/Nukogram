apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    google()
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

dependencies {
    implementation project(':TMessagesProj')
    implementation 'androidx.multidex:multidex:2.0.1'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.6'
    implementation files('../TMessagesProj/libs/libgsaverification-client.aar')
}

def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}


def proj_application_id = APP_PACKAGE
def proj_telegram_version = OFFICIAL_VERSION
def proj_telegram_build = Integer.parseInt(OFFICIAL_BUILD)
def proj_beta_enabled = Boolean.parseBoolean(NUKO_BETA)
def proj_beta_stamp = NUKO_BETA_STAMP
def proj_application_version = "${NUKO_VERSION}${proj_beta_enabled?"-Î²"+proj_beta_stamp:""}+tg${proj_telegram_version}"
def proj_application_build = Integer.parseInt(NUKO_BUILD)*100000 + proj_telegram_build

def proj_tg_app_id = Integer.parseInt(TELEGRAM_APP_ID)
def proj_tg_app_hash = TELEGRAM_APP_HASH

def proj_target_sdk = Integer.parseInt(ANDROID_TARGET_SDK_VERSION)
def proj_compile_sdk = Integer.parseInt(ANDROID_COMPILE_SDK_VERSION)
def proj_min_sdk = Integer.parseInt(ANDROID_MIN_SDK_VERSION)
def proj_build_tool_version = ANDROID_BUILD_TOOL_VERSION
def proj_ndk_version = "21.4.7075529"
def proj_java = JavaVersion.VERSION_1_8

def signing_keystore_pwd = null
def signing_key_alias = null
def signing_key_pwd = null
Properties properties
def base64 = System.getenv("LOCAL_PROPERTIES")
if (base64 != null && !base64.isBlank()) {
    properties = new Properties()
    properties.load(new ByteArrayInputStream(Base64.decoder.decode(base64)))
} else if (project.rootProject.file("local.properties").exists()) {
    properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
}
if (properties != null) {
    signing_keystore_pwd = properties.getProperty("SIGNING_KEYSTORE_PWD")
    signing_key_alias = properties.getProperty("SIGNING_KEY_ALIAS")
    signing_key_pwd = properties.getProperty("SIGNING_KEY_PWD")
}
signing_keystore_pwd = signing_keystore_pwd ?: System.getenv("SIGNING_KEYSTORE_PWD")
signing_key_alias = signing_key_alias ?: System.getenv("SIGNING_KEY_ALIAS")
signing_key_pwd = signing_key_pwd ?: System.getenv("SIGNING_KEY_PWD")


if (signing_keystore_pwd == null) print "[BUILD_CONFIG]Release signing config not set, debugging will user debug default signing."


android {
    compileSdkVersion proj_compile_sdk
    buildToolsVersion proj_build_tool_version

    defaultConfig.applicationId = proj_application_id

    sourceSets.main.jniLibs.srcDirs = ['../TMessagesProj/jni/']

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

//    dexOptions {
//        jumboMode = true
//    }

    compileOptions {
        sourceCompatibility proj_java
        targetCompatibility proj_java

        coreLibraryDesugaringEnabled true
    }
    
    signingConfigs {
        release {
            storeFile file("../TMessagesProj/config/release.keystore")
            storePassword signing_keystore_pwd
            keyAlias signing_key_alias
            keyPassword signing_key_pwd
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signing_keystore_pwd == null ? signingConfigs.debug : signingConfigs.release
            applicationIdSuffix ".beta"
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }

//        standalone {
//            debuggable false
//            jniDebuggable false
//            signingConfig signingConfigs.release
//            applicationIdSuffix ".web"
//            minifyEnabled true
//            multiDexEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
//            ndk.debugSymbolLevel = 'FULL'
//        }

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }
    }

    sourceSets.debug {
        manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest.xml'
    }

//    sourceSets.standalone {
//        manifest.srcFile '../TMessagesProj/config/release/AndroidManifest.xml'
//    }

    sourceSets.release {
        manifest.srcFile '../TMessagesProj/config/release/AndroidManifest.xml'
    }

    flavorDimensions "minApi"

    productFlavors {
        bundleAfat {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
            ext {
                abiVersionCode = 1
            }
        }
        bundleAfat_SDK23 {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
            sourceSets.debug {
                manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_SDK23.xml'
            }
//            sourceSets.standalone {
//                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_standalone.xml'
//            }
            minSdkVersion 23
            ext {
                abiVersionCode = 2
            }
        }
        afat {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
            sourceSets.debug {
                manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_SDK23.xml'
            }
//            sourceSets.standalone {
//                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_standalone.xml'
//            }
            ext {
                abiVersionCode = 9
            }
        }
    }

    defaultConfig.versionCode = proj_application_build

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "app.apk"
            output.versionCodeOverride = defaultConfig.versionCode * 10 + variant.productFlavors.get(0).abiVersionCode
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name != "release" && !names.contains("afat")) {
            setIgnore(true)
        }
    }

    defaultConfig {
        minSdkVersion proj_min_sdk
        targetSdkVersion proj_target_sdk
        versionName proj_application_version
        ndkVersion proj_ndk_version

// will generated by library project
//        buildConfigField 'String', 'PACKAGE_ID', "\"$proj_application_id\""
//        buildConfigField 'int', 'TELEGRAM_APP_ID', "$proj_tg_app_id"
//        buildConfigField 'String', 'TELEGRAM_APP_HASH', "\"$proj_tg_app_hash\""
// will generated by default
//        buildConfigField 'String', 'NUKO_VERSION', "$proj_application_version"
//        buildConfigField 'int', 'NUKO_BUILD', "$proj_application_build"
        
        multiDexEnabled true

        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-16', "-j=16"
            }
        }
    }

    buildFeatures {
        buildConfig = true
    }

    lintOptions {
        checkReleaseBuilds false
    }
}

apply plugin: 'com.google.gms.google-services'
